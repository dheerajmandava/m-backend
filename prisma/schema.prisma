generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id          String    @id @default(cuid())
  clerkUserId String    @unique
  name        String
  email       String    @unique
  phone       String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  jobCards    JobCard[]
  mechanics Mechanic[]
  serviceBays ServiceBay[]
  parts       Part[]
  inventory   Inventory[]
  suppliers   Supplier[]
  partOrders  PartOrder[]
  stockAdjustments StockAdjustment[]
  inventorySettings InventorySettings?

  @@index([clerkUserId])
}

model JobCard {
  id              String    @id @default(cuid())
  jobNumber       String    @unique
  shopId          String
  shop            Shop      @relation(fields: [shopId], references: [id])
  customerName    String
  customerPhone   String?
  customerEmail   String?
  vehicleMake     String
  vehicleModel    String
  vehicleYear     String
  registrationNo  String
  mileage         String?
  description     String
  status          JobStatus @default(PENDING)
  estimatedCost   Float?
  finalCost       Float?
  startDate       DateTime?
  completionDate  DateTime?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  scheduledDate    DateTime?
  scheduledTime    String?    // "MORNING" | "AFTERNOON" | "EVENING"
  estimatedHours   Float?
  mechanicId      String?
  mechanic        Mechanic?  @relation(fields: [mechanicId], references: [id])
  bayId           String?
  bay             ServiceBay? @relation(fields: [bayId], references: [id])
  statusHistory  StatusHistory[]
  jobNotes       JobNote[]
  parts        Part[]
  costs        JobCost[]
  laborRate   Float?    // Shop's standard labor rate
  totalParts  Float?    // Total parts cost
  totalLabor  Float?    // Total labor cost
  totalOther  Float?    // Other costs
  markup      Float?    // Parts markup percentage

  @@index([mechanicId])
}

model StatusHistory {
  id          String    @id @default(cuid())
  jobCardId   String
  fromStatus  String
  toStatus    String
  notes       String?
  changedBy   String
  createdAt   DateTime  @default(now())
  
  jobCard     JobCard   @relation(fields: [jobCardId], references: [id])

  @@index([jobCardId])
}

model Mechanic {
  id          String    @id @default(cuid())
  shopId      String
  name        String
  email       String?
  phone       String?
  specialties String[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shop        Shop      @relation(fields: [shopId], references: [id])
  jobs        JobCard[]

  @@index([shopId])
}

model ServiceBay {
  id          String    @id @default(cuid())
  shopId      String
  shop        Shop      @relation(fields: [shopId], references: [id])
  name        String    // "Bay 1", "Bay 2"
  type        String    // "GENERAL", "LIFT", "ALIGNMENT"
  jobs        JobCard[]
  isActive    Boolean   @default(true)
}

model JobNote {
  id          String    @id @default(cuid())
  jobCardId   String
  content     String
  createdBy   String
  createdAt   DateTime  @default(now())
  
  jobCard     JobCard   @relation(fields: [jobCardId], references: [id])

  @@index([jobCardId])
}

model Part {
  id          String    @id @default(cuid())
  shopId      String
  shop        Shop      @relation(fields: [shopId], references: [id])
  jobCardId   String?
  jobCard     JobCard?  @relation(fields: [jobCardId], references: [id])
  name        String
  partNumber  String
  quantity    Int
  costPrice   Float
  sellingPrice Float
  supplier    String?
  status      String    // "ORDERED", "IN_STOCK", "INSTALLED"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([shopId])
  @@index([jobCardId])
}

model JobCost {
  id          String    @id @default(cuid())
  jobCardId   String
  jobCard     JobCard   @relation(fields: [jobCardId], references: [id])
  type        String    // "LABOR", "PARTS", "OTHER"
  description String
  hours       Float?    // For labor costs
  rate        Float?    // Hourly rate for labor
  amount      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([jobCardId])
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  AWAITING_PARTS
  COMPLETED
  DELIVERED
}

model Inventory {
  id          String    @id @default(cuid())
  shopId      String
  shop        Shop      @relation(fields: [shopId], references: [id])
  partNumber  String
  name        String
  description String?
  quantity    Int       @default(0)
  minQuantity Int      @default(5)  // Reorder threshold
  location    String?   // Storage location
  category    String?
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  supplierId  String?
  costPrice   Float
  sellingPrice Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  adjustments StockAdjustment[]

  @@unique([shopId, partNumber])
  @@index([shopId])
}

model Supplier {
  id        String      @id @default(cuid())
  shopId    String
  shop      Shop        @relation(fields: [shopId], references: [id])
  name      String
  email     String?
  phone     String?
  address   String?
  terms     String?
  leadTime  Int?
  orders    PartOrder[]
  inventory   Inventory[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([shopId])
}

model PartOrder {
  id        String   @id @default(cuid())
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])
  supplierId String
  supplier  Supplier @relation(fields: [supplierId], references: [id])
  status    String   @default("PENDING") // PENDING, PARTIAL, COMPLETE, CANCELLED
  total     Float
  notes     String?
  items     PartOrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shopId])
  @@index([supplierId])
}

model PartOrderItem {
  id          String    @id @default(cuid())
  orderId     String
  order       PartOrder @relation(fields: [orderId], references: [id])
  partNumber  String
  name        String
  quantity    Int
  costPrice   Float
  total       Float
  status      String    @default("PENDING") // PENDING, RECEIVED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([orderId])
}

model StockAdjustment {
  id          String    @id @default(cuid())
  shopId      String
  shop        Shop      @relation(fields: [shopId], references: [id])
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  type        String    // "IN", "OUT", "ADJUSTMENT"
  quantity    Int
  reason      String    // "PURCHASE", "SALE", "RETURN", "DAMAGE", "COUNT_ADJUSTMENT"
  notes       String?
  reference   String?   // Reference to related document (order ID, job card ID, etc)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([shopId])
  @@index([inventoryId])
}

model InventorySettings {
  id                    String   @id @default(cuid())
  shopId               String   @unique
  shop                 Shop     @relation(fields: [shopId], references: [id])
  orderingCost         Float    @default(500)
  holdingCostPercentage Float    @default(20)
  safetyStockPercentage Float    @default(20)
  defaultLeadTime      Int      @default(7)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([shopId])
}