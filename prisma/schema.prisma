generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id                String             @id @default(cuid())
  clerkUserId       String             @unique
  name              String
  email             String             @unique
  phone             String?
  address           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  jobCards          JobCard[]
  mechanics         Mechanic[]
  serviceBays       ServiceBay[]
  parts             Part[]
  inventory         Inventory[]
  suppliers         Supplier[]
  partOrders        PartOrder[]
  stockAdjustments  StockAdjustment[]
  inventorySettings InventorySettings?
  estimates         Estimate[]
  invoices          Invoice[]
  payments          Payment[]

  @@index([clerkUserId])
}

model JobCard {
  id             String          @id @default(cuid())
  jobNumber      String          @unique
  shopId         String
  shop           Shop            @relation(fields: [shopId], references: [id])
  customerName   String
  customerPhone  String?
  customerEmail  String?
  vehicleMake    String
  vehicleModel   String
  vehicleYear    String
  registrationNo String
  mileage        String?
  description    String
  status         JobStatus       @default(PENDING)
  estimatedCost  Float?
  finalCost      Float?
  startDate      DateTime?
  completionDate DateTime?
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  scheduledDate  DateTime?
  scheduledTime  String? // "MORNING" | "AFTERNOON" | "EVENING"
  estimatedHours Float?
  mechanicId     String?
  mechanic       Mechanic?       @relation(fields: [mechanicId], references: [id])
  bayId          String?
  bay            ServiceBay?     @relation(fields: [bayId], references: [id])
  statusHistory  StatusHistory[]
  jobNotes       JobNote[]
  parts          Part[]
  costs          JobCost[]
  laborRate      Float? // Shop's standard labor rate
  totalParts     Float? // Total parts cost
  totalLabor     Float? // Total labor cost
  totalOther     Float? // Other costs
  markup         Float? // Parts markup percentage
  estimates      Estimate[]
  invoices       Invoice[]

  @@index([mechanicId])
}

model StatusHistory {
  id         String   @id @default(cuid())
  jobCardId  String
  fromStatus String
  toStatus   String
  notes      String?
  changedBy  String
  createdAt  DateTime @default(now())

  jobCard JobCard @relation(fields: [jobCardId], references: [id])

  @@index([jobCardId])
}

model Mechanic {
  id          String    @id @default(cuid())
  shopId      String
  name        String
  email       String?
  phone       String?
  specialties String[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shop        Shop      @relation(fields: [shopId], references: [id])
  jobs        JobCard[]

  @@index([shopId])
}

model ServiceBay {
  id       String    @id @default(cuid())
  shopId   String
  shop     Shop      @relation(fields: [shopId], references: [id])
  name     String // "Bay 1", "Bay 2"
  type     String // "GENERAL", "LIFT", "ALIGNMENT"
  jobs     JobCard[]
  isActive Boolean   @default(true)
}

model JobNote {
  id        String   @id @default(cuid())
  jobCardId String
  content   String
  createdBy String
  createdAt DateTime @default(now())

  jobCard JobCard @relation(fields: [jobCardId], references: [id])

  @@index([jobCardId])
}

model Part {
  id           String     @id @default(cuid())
  shopId       String
  shop         Shop       @relation(fields: [shopId], references: [id])
  jobCardId    String?
  jobCard      JobCard?   @relation(fields: [jobCardId], references: [id])
  inventoryId  String?
  inventory    Inventory? @relation(fields: [inventoryId], references: [id])
  name         String
  partNumber   String
  quantity     Int
  costPrice    Float
  sellingPrice Float
  supplier     String?
  status       PartStatus @default(PENDING) // New enum
  installedAt  DateTime? // Track when part was installed
  installedBy  String? // Track who installed it
  returnedAt   DateTime? // Track if part was returned
  returnReason String? // Reason for return if applicable
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([shopId])
  @@index([jobCardId])
  @@index([inventoryId])
}

enum PartStatus {
  PENDING // Part added to job but not installed
  INSTALLED // Part installed in vehicle
  RETURNED // Part returned to inventory
  DAMAGED // Part damaged during installation
  REPLACED // Part replaced under warranty
}

model JobCost {
  id          String   @id @default(cuid())
  jobCardId   String
  jobCard     JobCard  @relation(fields: [jobCardId], references: [id])
  type        String // "LABOR", "PARTS", "OTHER"
  description String
  hours       Float? // For labor costs
  rate        Float? // Hourly rate for labor
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([jobCardId])
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  AWAITING_PARTS
  COMPLETED
  DELIVERED
}

model Inventory {
  id           String            @id @default(cuid())
  shopId       String
  shop         Shop              @relation(fields: [shopId], references: [id])
  partNumber   String
  name         String
  description  String?
  quantity     Int               @default(0)
  minQuantity  Int               @default(5) // Reorder threshold
  location     String? // Storage location
  category     String?
  supplier     Supplier?         @relation(fields: [supplierId], references: [id])
  supplierId   String?
  costPrice    Float
  sellingPrice Float
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  adjustments  StockAdjustment[]
  parts        Part[] // Relation to parts used in jobs

  @@unique([shopId, partNumber])
  @@index([shopId])
}

model Supplier {
  id        String      @id @default(cuid())
  shopId    String
  shop      Shop        @relation(fields: [shopId], references: [id])
  name      String
  email     String?
  phone     String?
  address   String?
  terms     String?
  leadTime  Int?
  orders    PartOrder[]
  inventory Inventory[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([shopId])
}

model PartOrder {
  id         String          @id @default(cuid())
  shopId     String
  shop       Shop            @relation(fields: [shopId], references: [id])
  supplierId String
  supplier   Supplier        @relation(fields: [supplierId], references: [id])
  status     String          @default("PENDING") // PENDING, PARTIAL, COMPLETE, CANCELLED
  total      Float
  notes      String?
  items      PartOrderItem[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@index([shopId])
  @@index([supplierId])
}

model PartOrderItem {
  id         String    @id @default(cuid())
  orderId    String
  order      PartOrder @relation(fields: [orderId], references: [id])
  partNumber String
  name       String
  quantity   Int
  costPrice  Float
  total      Float
  status     String    @default("PENDING") // PENDING, RECEIVED
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([orderId])
}

model StockAdjustment {
  id          String    @id @default(cuid())
  shopId      String
  shop        Shop      @relation(fields: [shopId], references: [id])
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  type        String // "IN", "OUT", "ADJUSTMENT"
  quantity    Int
  reason      String // "PURCHASE", "SALE", "RETURN", "DAMAGE", "COUNT_ADJUSTMENT"
  notes       String?
  reference   String? // Reference to related document (order ID, job card ID, etc)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([shopId])
  @@index([inventoryId])
}

model InventorySettings {
  id                    String   @id @default(cuid())
  shopId                String   @unique
  shop                  Shop     @relation(fields: [shopId], references: [id])
  orderingCost          Float    @default(500)
  holdingCostPercentage Float    @default(20)
  safetyStockPercentage Float    @default(20)
  defaultLeadTime       Int      @default(7)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([shopId])
}

// Add these enums
enum EstimateStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  BANK_TRANSFER
  CHEQUE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Add these models
model Estimate {
  id                String         @id @default(cuid())
  shopId           String
  shop             Shop           @relation(fields: [shopId], references: [id])
  jobCardId        String
  jobCard          JobCard        @relation(fields: [jobCardId], references: [id])
  estimateNumber   String         @unique
  status           EstimateStatus @default(DRAFT)
  subtotal         Float
  taxRate          Float?         // Percentage
  taxAmount        Float?
  discountRate     Float?         // Percentage
  discountAmount   Float?
  total            Float
  notes            String?
  termsAndConditions String?
  validUntil       DateTime?
  sentAt           DateTime?
  approvedAt       DateTime?
  rejectedAt       DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  items            EstimateItem[]
  invoice          Invoice?

  @@index([shopId])
  @@index([jobCardId])
}

model EstimateItem {
  id          String    @id @default(cuid())
  estimateId  String
  estimate    Estimate  @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  type        String    // LABOR, PARTS, OTHER
  description String
  quantity    Int?
  unitPrice   Float
  amount      Float
  notes       String?
}

model Invoice {
  id                String        @id @default(cuid())
  shopId           String
  shop             Shop          @relation(fields: [shopId], references: [id])
  jobCardId        String
  jobCard          JobCard       @relation(fields: [jobCardId], references: [id])
  estimateId       String?       @unique
  estimate         Estimate?     @relation(fields: [estimateId], references: [id])
  invoiceNumber    String        @unique
  status           InvoiceStatus @default(DRAFT)
  subtotal         Float
  taxRate          Float?        // Percentage
  taxAmount        Float?
  discountRate     Float?        // Percentage
  discountAmount   Float?
  total            Float
  amountPaid       Float         @default(0)
  balance          Float
  dueDate          DateTime?
  notes            String?
  termsAndConditions String?
  sentAt           DateTime?
  paidAt           DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  items            InvoiceItem[]
  payments         Payment[]

  @@index([shopId])
  @@index([jobCardId])
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  type        String   // LABOR, PARTS, OTHER
  description String
  quantity    Int?
  unitPrice   Float
  amount      Float
  notes       String?
}

model Payment {
  id            String        @id @default(cuid())
  shopId        String
  shop          Shop         @relation(fields: [shopId], references: [id])
  invoiceId     String
  invoice       Invoice      @relation(fields: [invoiceId], references: [id])
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  reference     String?      // Payment reference number
  notes         String?
  processedAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([shopId])
  @@index([invoiceId])
}
